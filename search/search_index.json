{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Introduction/Goal","text":"<p>The purpose of this project is to completely automate the setup of my existing home network. This includes automating the setup of my OPNSense firewall/router and for configuring the Mikrotik Cloud Router Switches that are replacing my existing LAN Unifi stack.</p> <p>For the OPNSense Firewall, the project's goal is to configure the following:</p> <ul> <li>Host name</li> <li>VLANs (themselves and their interface assignments)</li> <li>Firewall interfaces (related rules and their aliases)</li> <li>DHCP / DNS (for each VLAN)</li> <li>TailScale - Potentially migrate to local plugin rather than installing directly in OPNSense CLI </li> <li>Plugins:<ul> <li>OS-GIT-BACKUP (for version-control based backups of the firewall)</li> <li>OS-THEME-REBELLION (for dark UI theme)</li> </ul> </li> </ul> <p>For the Mikrotik switches, the project's goal is to configure the following:</p> <ul> <li>Host name</li> <li>Management IP address (on management-type VLAN)</li> <li>Trunk/access ports for relevant VLANs</li> <li>Basic RTSP parameters (so that the switch directly behind the firewall is the root bridge)</li> </ul>"},{"location":"blog/","title":"Logged Work","text":""},{"location":"blog/2025/05/24/vlan-configurations/","title":"VLAN Configurations","text":""},{"location":"blog/2025/05/24/vlan-configurations/#work-completed","title":"Work Completed","text":"<p>Note: This is the first entry for the project.</p> <p>On this date, the following was completed:</p> <ul> <li>Finished configuration of OPNSense XML handling so that all internal VLANs could be created.</li> <li>Consolidated config file manipulation functionality into a single tasks file and ensured that the playbook could successfully exit execution if the pulled file was out of date.</li> <li>Migrated the variable for the local config file directory from the inventory host file to the playbook itself (didn't make sense to have it in the configuration of the managed firewall).</li> </ul>"},{"location":"blog/2025/05/24/vlan-configurations/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Working on modifying the VLANs task folder so that we can generate the L3 config, interface assignment, DHCP, and DNS configurations for each of them in one go (rather than breaking them up and iterating over each vlan several times).</li> </ul>"},{"location":"blog/2025/05/25/vlan-firewall-interface-configurations/","title":"VLAN Firewall Interface Configurations","text":""},{"location":"blog/2025/05/25/vlan-firewall-interface-configurations/#work-completed","title":"Work Completed","text":"<p>On this date, the following was completed:</p> <ul> <li> <p>Re-worked tasks layout for OPNSense role so that it works off an abstraction that lays out functionality for generating internal (inside) networks. While alot of the functionality is still in progress, this new layout will allow us to utilize a single loop to build each VLAN, it's associated firewall interface, and it's associated DHCP and DNS configurations all in one go (rather than multiple loops).</p> </li> <li> <p>Added functionality to map created VLANs to firewall interfaces. This is so rules can be setup for traffic filtering down the road.</p> </li> </ul>"},{"location":"blog/2025/05/25/vlan-firewall-interface-configurations/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Modifying the VLAN configurations so that changed mode can be accurately represented. <ul> <li>Note: Specifically, for cases in where changes to sub elements in XML aren't shown because the parent doesn't exist yet.</li> </ul> </li> <li>Re-visiting the current DHCP configuration in the production environment and determining whether changes need to be made. This is the case as the current DHCP configurations are utilizing ISC for the DHCP server and OPNSense recommends DNSMASQ.<ul> <li>If changes need to be made for use, I will work to implement them in the GNS3 virtual environment. Once I've learned how to configure them, I will add those configurations as tasks to the workbooks.</li> </ul> </li> </ul>"},{"location":"blog/2025/06/28/unbound-dns-query-forwarding-buildoutproject-re-structuring/","title":"Unbound DNS Query Forwarding Buildout/Project Re-structuring","text":""},{"location":"blog/2025/06/28/unbound-dns-query-forwarding-buildoutproject-re-structuring/#work-completed","title":"Work Completed","text":"<p>On this date, the following was completed:</p> <ul> <li>Built out tasks for XML configuration for Unbound DNS and for the query forwarding that needs to be    setup for each internal network</li> <li>Re-structured the project to remove the \"FIREWALL - \" and \"CONTROL NODE - \" naming scheme for tasks and utilized   variable overrides to detail all relevant information for internal network configurations instead.    The following example might be used:</li> </ul> <p>INTERNAL NETWORK - [NETWORK NAME] - CREATE VLAN [VLAN ID] - SET [VLAN OPTION] - [VLAN OPTION VALUE]</p>"},{"location":"blog/2025/06/28/unbound-dns-query-forwarding-buildoutproject-re-structuring/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Working to build the DNSMASQ DHCP/DNS XML task configurations and testing those once they're built out.</li> </ul>"},{"location":"blog/2025/07/01/dnsmasq-dhcpdns-configuration-buildout/","title":"DNSMASQ DHCP/DNS Configuration Buildout","text":""},{"location":"blog/2025/07/01/dnsmasq-dhcpdns-configuration-buildout/#work-completed","title":"Work Completed","text":"<p>On this date, the following was completed:</p> <ul> <li>Built out tasks for XML configuration for DNSMASQ itself and the DHCP scopes that would be needed</li> </ul>"},{"location":"blog/2025/07/01/dnsmasq-dhcpdns-configuration-buildout/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Applying that configuration to the test firewall instance in GNS3 and verifying afterward that   traffic flow is working correctly for DNS/DHCP. <ul> <li>A Mikrotik switch will be re-configured from scratch in GNS3 to practice my skills in configuring them   and it will be used in tandem for testing the configuration.</li> </ul> </li> </ul>"},{"location":"blog/2025/07/02/dnsmasq-dhcpdns-configuration-testing-day-1/","title":"DNSMASQ DHCP/DNS Configuration Testing (Day 1)","text":""},{"location":"blog/2025/07/02/dnsmasq-dhcpdns-configuration-testing-day-1/#work-completed","title":"Work Completed","text":"<p>On this date, the following was completed:</p> <ul> <li>Worked through some syntax/logic errors for the DNSMASQ DHCP/DNS logic while   running the project in changed/production mode to make the desired XML changes.</li> <li>Started looking into the configuration of RouterOS for vlan use for configuration testing.</li> </ul>"},{"location":"blog/2025/07/02/dnsmasq-dhcpdns-configuration-testing-day-1/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Continuing to test the configuration to the test firewall instance in GNS3 and verifying afterward that   traffic flow is working correctly for DNS/DHCP.<ul> <li>Start working to configure a Mikrotik instance for testing as well (to replicate a similar RoAS configuration that will later be used in production)</li> </ul> </li> </ul>"},{"location":"blog/2025/07/04/dnsmasq-dhcpdns-configuration-testing-day-2/","title":"DNSMASQ DHCP/DNS Configuration Testing (Day 2)","text":""},{"location":"blog/2025/07/04/dnsmasq-dhcpdns-configuration-testing-day-2/#work-completed","title":"Work Completed","text":"<p>On this date, the following was completed:</p> <ul> <li>Verified that the latest XML configurations for DNSMASQ DHCP were working</li> <li>Verified that test devices in the FAMILY/GUEST enviroment were able to do the following:<ul> <li>Receive an IP from the corresponding DHCP scope</li> <li>Gain Internet access (by 8.8.8.8 and google.com)</li> <li>Gain access to each other by FQDN and be able to perform appropriate DNS forward/reverse lookups   (both within the same subnet and outside of it)</li> </ul> </li> <li>Added logic to disable the original ISC DHCP implementation for the LAN interface</li> <li>Re-worked the functionality so that the LAN and LOOPBACK interfaces were excluded for DHCP use by DNSMASQ  (as we aren't creating scopes for them)</li> <li>Re-organized project files to break up task files into three subfolders:<ul> <li>Initial Prep (What needs to be done before re-configuring the XML?)</li> <li>XML Configs (what changes need to be made?)</li> <li>Post Config Actions (what actions we might need to take after the fact?)</li> </ul> </li> </ul>"},{"location":"blog/2025/07/04/dnsmasq-dhcpdns-configuration-testing-day-2/#current-status-next-steps","title":"Current Status / Next Steps:","text":"<p>Going forward, I will be doing the following:</p> <ul> <li>Looking into whether it would be necessary to modify the DNSMASQ DHCP/DNS configuration (for the TOOLS4EVER network) to use tools4ever.firstgambrellianempire.com rather than tools4ever.internal.firstgambrellianempire.com for consistency with the existing AD domain in use.</li> </ul>"},{"location":"testing_env_setup/","title":"Initial Setup","text":"<p>While a home network wouldn't typically be considered priority or critical enough to warrant a need to take extra precautions for a project like this, I didn't want to anger the rest of the household by killing the Internet connection. This is especially the case as I tend to swap between projects and completion timelines aren't entirely set in stone.</p> <p>With that in mind, I decided to develop this automation by first replicating it into a virtualized (testing) environment in GNS3. As I had originally setup a GNS3 server for use for my CCNA studies, I thought it best to utilize it now to stand up a testing environment for building my Ansible playbook(s).</p> <p>Since we are integrating with tools in a virtual testing environment, a particular setup had to be devised in order to ease development while also ensuring that we could get the environment as close to production as humanely possible.</p> <p>In the end, we settled with the following for the server and networking setup:</p> <pre><code>flowchart TD\n\n    %%%%%%%%%%%\n    %% NODES %%\n    %%%%%%%%%%%\n\n    %% DEFINE TITLE NODES %%\n\n    PHN_Block_Title@{ shape: doc, label: \"PRODUCTION HOME NETWORK\" }\n    GNS_Block_Title@{ shape: doc, label: \"GNS3 SERVER&lt;br/&gt;(Virtual Network Lab)\" }\n    Proxmox_Block_Title@{ shape: doc, label: \"PROXMOX VE SERVER&lt;br/&gt;(VM/CTs)\" }\n\n    %% Define Production Home Network Nodes\n\n    PRD_OPNSense[\"OPNSense Firewall/Router\"]\n    PRD_Switching[\"LAN(s)\"]\n    DEV_Workstation[\"Dev Workstation&lt;br/&gt;(VSCode)\"]\n\n    %% Define Proxmox Server Nodes\n\n    PVE_LXC[\"Ubuntu 24.04 LXC Container&lt;br/&gt;(Ansible Control Node)\"]\n\n    %% Define GNS3 Server Nodes\n\n    VIRT_OPNSense[\"OPNSense Virtual Appliance&lt;br/&gt;(Ansible Managed Node)\"]\n    VIRT_Switching[\"LAN(s)\"]\n\n    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n    %% DEFINE SUBGRAPH STRUCTURES %%\n    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n    %% Define Internet Subgraph\n\n    subgraph Internet\n    end\n\n    %% Define Production Home Network Subgraph (and any nested/formatting-type subgraphs)\n\n    %%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%\n    subgraph Production_Home_Network [\" \"]\n\n        PHN_Block_Title\n\n        PRD_OPNSense\n        PRD_Switching\n        DEV_Workstation\n\n        %% Define Proxmox VE Server Block\n        subgraph Proxmox_VE_Server [\" \"]\n            direction TB\n            PVE_LXC\n            Proxmox_Block_Title\n        end\n\n        %% Define GNS3 Server Block\n        subgraph GNS3_Server [\" \"]\n            direction TB\n            VIRT_OPNSense\n            VIRT_Switching\n            GNS_Block_Title\n        end\n    end\n\n    %%%%%%%%%%%%%%%%%%%%%%\n    %% Link Definitions %%\n    %%%%%%%%%%%%%%%%%%%%%%\n\n    %% Link ID: 0 (INTERNET TO OPNSENSE PROD FIREWALL)\n    Internet === PRD_OPNSense\n\n    %% Link ID: 1 (OPSENSE PROD FIREWALL TO PROD LAN)\n    PRD_OPNSense === PRD_Switching\n\n    %% Link ID: 2 and 3 (PROD LAN TO VIRTUAL OPNSENSE APPLIANCE)\n    PRD_Switching === VIRT_OPNSense\n    PRD_Switching === VIRT_OPNSense\n\n    %% Link ID: 4 (VIRTUAL OPNSENSE APPLIANCE TO VIRTUAL LAN)\n    VIRT_OPNSense === VIRT_Switching\n\n    %% Link ID: 5 (PROD LAN TO DEVELOPMENT WORKSTATION)\n    PRD_Switching === DEV_Workstation\n\n    %% Link ID: 6 (PROD LAN TO PROXMOX LXC)\n    PRD_Switching === PVE_LXC\n\n    %% Link ID: 7, 8, 9 (TITLES)\n    VIRT_Switching ~~~ GNS_Block_Title\n    PVE_LXC ~~~ Proxmox_Block_Title\n\n    %%%%%%%%%%%%\n    %% Styles %%\n    %%%%%%%%%%%%\n\n    %% Hidden Nodes Style\n    classDef hidden fill:#0000,stroke:#0000\n\n    %% VLAN Trunk Link Style\n    linkStyle 1,4 stroke-width:7px,stroke:blue\n\n    %% OPNSense Virtual Appliance MGMT Link Style\n    linkStyle 2,6 stroke-width:7px,stroke:red\n\n    %% OPNSense Virtual Appliance WAN Link Style\n    linkStyle 3 stroke-width:7px,stroke:green\n\n    %% 'Other' Link Style\n    linkStyle 0,5 stroke-width:7px\n\n    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n    %% Class-Based Style Applications %%\n    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n    Production_Home_Network:::PROD</code></pre>"},{"location":"testing_env_setup/#vlans-connections","title":"VLANS / Connections","text":"COLOR VLAN Name VLAN ID BLUE VLAN Trunks (RoAS or Router-On-A-Stick) N/A GREEN OPNSense Virtual Appliance WAN 200 RED OPNSense Virtual Appliance MGMT 210 BLACK OTHER N/A"},{"location":"testing_env_setup/#network-format-vlans","title":"Network Format (VLANS)","text":"NETWORK GATEWAY/DNS ADDRESSES DHCP RANGE 172.99.[VLAN ID].200/24 .254 .100-.199"},{"location":"testing_env_setup/#device-ip-addresses","title":"Device IP Addresses","text":"LEASING SCHEME IP ADDRESS DEVICE STATIC 172.99.210.200/24 Proxmox VE Ubuntu LXC Interface STATIC 172.99.210.201/24 OPNSense Virtual Appliance MGMT Interface DHCP DYNAMIC OPNSense Virtual Appliance WAN Interface <p>The original production network consisted of an OPNSense firewall in an RoAS configuration with multiple VLAN-trunked Unifi switches providing access to end devices and servers in the household.</p> <p>In starting this project, the idea was to automate the setup of that production firewall by connecting downstream of its default LAN interface and running the playbook  against the interface IP address (192.168.1.1/24). However, if I tried to replicate that same configuration in GNS3, I would've had to resort to using a GNS3 appliance to develop my playbooks(s). While I could've looked at some configuration for passing the virtual environment's LAN back to the production network (by providing a physical interface out to the network), I wanted to avoid that looped configuration due to the possibility of the virtual LAN's network segment overlapping with the production's network (as it's the default LAN is in use in production for management of the current Unifi stack).</p> <p>With that in mind, I used a CLI Debian-based appliance within GNS3 for development. However, I got tired of it pretty quickly due to the headaches involved in CLI navigation and looked to using Visual Studio Code as I was quite comfortable with it from my time working on NGF Records. However, at the same time, I didn't feel that it was good to bloat that appliance with a GUI for development when I was using an old gaming PC as my workstation locally. Instead, I looked to having a separate management interface setup (with minimal configuration) on the OPNSense appliance and having that interface connected to a production VLAN (ID: 210) that my development workstation could access (from it's place on another production VLAN not named here).</p> <p>That setup looked good so far but I realized that I couldn't use my Windows 11-based workstation as a control node (it was feasible with WSL or Windows Subsystem for Linux but I didn't want to use a setup that Ansible designated as unsupported). At that point, I got around it by setting up an Ubuntu LXC container on my Proxmox hypervisor (configured as a part of my homelab) and connected it to the same management VLAN. I jumped at this setup as I had realized from past experience that Visual Studio Code could use SSH to remote into another environment for development. At the same time, the isolated nature of using a container for development made it an optimal choice for acting as the Ansible control node (and host for both the code and documentation repositories). In the end, I simplified (and secured) the setup even further by making use of SSH agent forwarding to keep SSH keys local to my development workstation.</p> <p>I also introducted another production VLAN (ID: 200) and address range that I could use for the GNS3 OPNSense appliance WAN. As we were going to be building automations against a virtual firewall whose WAN address was handed down by a production VLAN through DHCP by a bare-metal firewall, I wanted to avoid the possibility of configuring an existing VLAN whose network segment overlapped with the address used by the virtual appliance's WAN connection (my environment used 10.19.50.0/24 originally as an experimentation VLAN in production and that would've conflicted with automation development if we needed to configure that on one VLAN interface while the WAN was also using an address from that same segment.)</p>"},{"location":"testing_env_setup/opnsense_setup/","title":"Ansible Managed Node Setup (OPNSense)","text":"<p>To connect the Ansible control node (LXC) to the GNS3 OPNSense virtual appliance, the following steps were taken:</p>"},{"location":"testing_env_setup/opnsense_setup/#control-node","title":"Control Node","text":""},{"location":"testing_env_setup/opnsense_setup/#generate-ssh-keys","title":"Generate SSH Keys","text":"<p>SSH Keys were generated through the CLI locally using the following command: </p> <p><code>ssh-keygen -t ed25519</code></p> <p>Note: *The default key name, file location, and passphrase defaults were left as is.*</p> <p>A public/private key pair (id_ed25519/id_ed25519.pub) was created under the .ssh directory for the logged-in user.</p>"},{"location":"testing_env_setup/opnsense_setup/#opnsense","title":"OPNSense","text":""},{"location":"testing_env_setup/opnsense_setup/#upload-ssh-public-key","title":"Upload SSH Public Key","text":"<p>Once logged onto the OPNSense target node, we navigated to System &gt; Access &gt; Users &gt; Edit (for root user)</p> <p>Added public key (copy content from id_ed25519.pub file) from control node to Authorized_Keys field.</p>"},{"location":"testing_env_setup/opnsense_setup/#enable-ssh-root-login","title":"Enable SSH / Root Login","text":"<p>Afterward, navigated to System &gt; Settings &gt; Administration &gt; Secure Shell and checked the following options:</p> <ul> <li>Secure Shell Server (Enable Secure Shell)</li> <li>Root Login (Permit root user login)</li> </ul>"},{"location":"testing_env_setup/opnsense_setup/#configure-management-interface","title":"Configure Management Interface","text":"<p>In GNS3, the [LAN] and [WAN] interfaces should've been auto-configured to use the physical vtnet0 and vtnet1 interfaces. The next physical interface [vtnet2] was used for management access and was configured using the following steps:</p> <ul> <li>Added as a management interface by navigating to Interfaces &gt; Assignments &gt; Assign a new interface<ul> <li>Added using the name ANSIBLE_MGMT.</li> </ul> </li> <li>Under Interfaces &gt; [ANSIBLE_MGMT], the following options were checked:<ul> <li>Enable (Enable Interface)</li> <li>Lock (Prevent Interface Removal)</li> <li>Block bogon networks</li> </ul> </li> <li>Under the same menu, a static IPV4 configuration was selected and provided with the following: 172.99.210.201/24</li> <li>Under Firewall &gt; Rules &gt; ANSIBLE_MGMT, a firewall rule was created with the following additional criteria:<ul> <li>Source - ANSIBLE_MGMT net</li> <li>Destination - ANSIBLE_MGMT address</li> <li>Description - ALLOW ALL TRAFFIC</li> </ul> </li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}